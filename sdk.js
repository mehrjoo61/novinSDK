(()=>{var e={320:(e,t,n)=>{const r=n(696);function o(e){const t=document.cookie.split(";");for(let n=0;n<t.length;n++){const r=t[n].trim();if(r.startsWith(e+"="))return r.substring(e.length+1)}}let s,i,a;async function c(){try{const e="novinAnonymousId";return(await apiClient.post("/users/getUser/"+o(e),i)).data}catch(e){throw console.error("Error:",e.message),e}}apiClient=r.create({baseURL:"https://cdp.novin.marketing/api",timeout:5e3}),e.exports={postAnonymousUser:async function(){try{return(await apiClient.post("/users/anonymousUser",i)).data}catch(e){throw console.error("Error:",e.message),e}},sendEvent:async function(e){try{const t="novinAnonymousId";return e.userId||(e.anonymousId=o(t)),e.projectId||(e.projectId=s),console.log("sendBody: ",e),(await apiClient.post("/events/send",e)).data}catch(e){throw console.error("Error:",e.message),e}},getAnonymousId:function(){return o("novinAnonymousId")},getUserId:async function(){try{const e=await c();return void 0!==e.userId?e.userId:null}catch(e){throw console.error("Error:",e.message),e}},isaAccessibe:async function(){try{const e=await c();return!(!e.email&&!e.mobile)}catch(e){throw console.error("Error:",e.message),e}},setAttributes:async function(e){try{const t="novinAnonymousId";return e.anonymousId||(e.anonymousId=o(t)),e.projectId||(e.projectId=s),(await apiClient.post("/users/anonymousUser",e)).data}catch(e){throw console.error("Error:",e.message),e}},getUser:c,findByMobile:async function(e){try{return(await apiClient.post("/users/findUserByMobile/"+e,i)).data}catch(e){throw console.error("Error:",e.message),e}},findByEmail:async function(e){try{return(await apiClient.post("/users/findUserByEmail/"+e,i)).data}catch(e){throw console.error("Error:",e.message),e}},isIdentified:async function(){try{return null!=(await c()).userId}catch(e){throw console.error("Error:",e.message),e}},initializeProjectId:function(e){a=o("novin-AB"),s=e,i={projectId:s,novinAB:{value:a}}},getABType:function(){return o("novin-AB")},getFirstEvent:async function(e){try{const t="novinAnonymousId";return e.userId||(e.userId=o(t)),e.projectId||(e.projectId=s),(await apiClient.post("/events/getFirstEvent",e)).data}catch(e){throw console.error("Error:",e.message),e}},getLastEvent:async function(e){try{const t="novinAnonymousId";return e.userId||(e.userId=o(t)),e.projectId||(e.projectId=s),(await apiClient.post("/events/getLastEvent",e)).data}catch(e){throw console.error("Error:",e.message),e}},addWebPushToken:async function(e){try{const t="novinAnonymousId";return e._id||(e._id=o(t)),e.projectId||(e.projectId=s),console.log(e),(await apiClient.post("/users/addWebPushToken",e)).data}catch(e){throw console.error("Error:",e.message),e}}}},512:(e,t,n)=>{"use strict";var r=n(320);function o(e){const t=document.cookie.split(";");for(let n=0;n<t.length;n++)if(t[n].trim().startsWith(e+"="))return!0;return!1}function s(e){const t=document.cookie.split(";");for(let n=0;n<t.length;n++){const r=t[n].trim();if(r.startsWith(e+"="))return r.substring(e.length+1)}}e=n.hmd(e),n.g.novin={init:async function(e){await async function(){const e="novin-AB";if(!o(e)||!s(e))try{const t=31536e6,n=new Date(Date.now()+t);document.cookie=`${e}=${Math.random()<.5?"A":"B"}; expires=${n.toUTCString()}; path=/`}catch(e){console.error("Error: ",e)}}(),(0,r.initializeProjectId)(e.novinProjectId),await async function(){const e="novinAnonymousId";if(!o(e)||!s(e))try{const t=(await(0,r.postAnonymousUser)())._id,n=31536e6,o=new Date(Date.now()+n);document.cookie=`${e}=${t}; expires=${o.toUTCString()}; path=/`;const s=`${window.location.origin}/wp-admin/admin-ajax.php?action=track_page_view_event`;axios.post(s).then((function(e){})).catch((function(e){}))}catch(e){console.error("Error while getting anonymous user from server:",e)}}()},getVersion:function(){return"1.2.2"},user:{getUser:async function(){return await(0,r.getUser)()},getUserId:async function(){return await(0,r.getUserId)()},getAnonymousId:function(){return(0,r.getAnonymousId)()},getABType:function(){return(0,r.getABType)()},isaAccessibe:async function(){return await(0,r.isaAccessibe)()},setAttributes:async function(e){return await(0,r.setAttributes)(e)},addWebPushToken:async function(e){return await(0,r.addWebPushToken)(e)},findByMobile:async function(e){return await(0,r.findByMobile)(e)},findByEmail:async function(e){return await(0,r.findByEmail)(e)},isIdentified:async function(){return await(0,r.isIdentified)()},hasWebPush:async function(){return await async function(){let e=await novin.user.getUser();return!!(e.webPushTokens&&e.webPushTokens.length>0&&"granted"==Notification.permission)}()}},event:{send:async function(e){return await(0,r.sendEvent)(e)},getFirstEvent:async function(e){return await(0,r.getFirstEvent)(e)},getLastEvent:async function(e){return await(0,r.getLastEvent)(e)}},funcs:{persianToEnglish:function(e){return e.replace(/[\u0660-\u0669]/g,(function(e){return e.charCodeAt(0)-1632})).replace(/[\u06f0-\u06f9]/g,(function(e){return e.charCodeAt(0)-1776}))},validateEmail:function(e){return/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(e)},validateMobile:function(e){return!!/^09\d{9}$/.test(e)},validURL:function(e){return!!new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$","i").test(e)}}},e.exports=s},696:(e,t,n)=>{"use strict";function r(e,t){return function(){return e.apply(t,arguments)}}const{toString:o}=Object.prototype,{getPrototypeOf:s}=Object,i=(a=Object.create(null),e=>{const t=o.call(e);return a[t]||(a[t]=t.slice(8,-1).toLowerCase())});var a;const c=e=>(e=e.toLowerCase(),t=>i(t)===e),u=e=>t=>typeof t===e,{isArray:l}=Array,f=u("undefined"),d=c("ArrayBuffer"),p=u("string"),h=u("function"),m=u("number"),y=e=>null!==e&&"object"==typeof e,g=e=>{if("object"!==i(e))return!1;const t=s(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},w=c("Date"),b=c("File"),E=c("Blob"),O=c("FileList"),v=c("URLSearchParams");function A(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),l(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),s=o.length;let i;for(r=0;r<s;r++)i=o[r],t.call(null,e[i],i,e)}}function S(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const R="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:n.g,T=e=>!f(e)&&e!==R,j=(x="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>x&&e instanceof x);var x;const C=c("HTMLFormElement"),P=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),N=c("RegExp"),_=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};A(n,((n,o)=>{let s;!1!==(s=t(n,o,e))&&(r[o]=s||n)})),Object.defineProperties(e,r)},U="abcdefghijklmnopqrstuvwxyz",B="0123456789",F={DIGIT:B,ALPHA:U,ALPHA_DIGIT:U+U.toUpperCase()+B},I=c("AsyncFunction");var k={isArray:l,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!f(e)&&null!==e.constructor&&!f(e.constructor)&&h(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||h(e.append)&&("formdata"===(t=i(e))||"object"===t&&h(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:p,isNumber:m,isBoolean:e=>!0===e||!1===e,isObject:y,isPlainObject:g,isUndefined:f,isDate:w,isFile:b,isBlob:E,isRegExp:N,isFunction:h,isStream:e=>y(e)&&h(e.pipe),isURLSearchParams:v,isTypedArray:j,isFileList:O,forEach:A,merge:function e(){const{caseless:t}=T(this)&&this||{},n={},r=(r,o)=>{const s=t&&S(n,o)||o;g(n[s])&&g(r)?n[s]=e(n[s],r):g(r)?n[s]=e({},r):l(r)?n[s]=r.slice():n[s]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&A(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:o}={})=>(A(t,((t,o)=>{n&&h(t)?e[o]=r(t,n):e[o]=t}),{allOwnKeys:o}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,a;const c={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],r&&!r(a,e,t)||c[a]||(t[a]=e[a],c[a]=!0);e=!1!==n&&s(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:c,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(l(e))return e;let t=e.length;if(!m(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:C,hasOwnProperty:P,hasOwnProp:P,reduceDescriptors:_,freezeMethods:e=>{_(e,((t,n)=>{if(h(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];h(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return l(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:S,global:R,isContextDefined:T,ALPHABET:F,generateString:(e=16,t=F.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&h(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(y(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=l(e)?[]:{};return A(e,((e,t)=>{const s=n(e,r+1);!f(s)&&(o[t]=s)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:I,isThenable:e=>e&&(y(e)||h(e))&&h(e.then)&&h(e.catch)};function L(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}k.inherits(L,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:k.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const D=L.prototype,z={};function M(e){return k.isPlainObject(e)||k.isArray(e)}function q(e){return k.endsWith(e,"[]")?e.slice(0,-2):e}function W(e,t,n){return e?e.concat(t).map((function(e,t){return e=q(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{z[e]={value:e}})),Object.defineProperties(L,z),Object.defineProperty(D,"isAxiosError",{value:!0}),L.from=(e,t,n,r,o,s)=>{const i=Object.create(D);return k.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),L.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,s&&Object.assign(i,s),i};const H=k.toFlatObject(k,{},null,(function(e){return/^is[A-Z]/.test(e)}));function J(e,t,n){if(!k.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=k.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!k.isUndefined(t[e])}))).metaTokens,o=n.visitor||u,s=n.dots,i=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&k.isSpecCompliantForm(t);if(!k.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(k.isDate(e))return e.toISOString();if(!a&&k.isBlob(e))throw new L("Blob is not supported. Use a Buffer instead.");return k.isArrayBuffer(e)||k.isTypedArray(e)?a&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,o){let a=e;if(e&&!o&&"object"==typeof e)if(k.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(k.isArray(e)&&function(e){return k.isArray(e)&&!e.some(M)}(e)||(k.isFileList(e)||k.endsWith(n,"[]"))&&(a=k.toArray(e)))return n=q(n),a.forEach((function(e,r){!k.isUndefined(e)&&null!==e&&t.append(!0===i?W([n],r,s):null===i?n:n+"[]",c(e))})),!1;return!!M(e)||(t.append(W(o,n,s),c(e)),!1)}const l=[],f=Object.assign(H,{defaultVisitor:u,convertValue:c,isVisitable:M});if(!k.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!k.isUndefined(n)){if(-1!==l.indexOf(n))throw Error("Circular reference detected in "+r.join("."));l.push(n),k.forEach(n,(function(n,s){!0===(!(k.isUndefined(n)||null===n)&&o.call(t,n,k.isString(s)?s.trim():s,r,f))&&e(n,r?r.concat(s):[s])})),l.pop()}}(e),t}function $(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function V(e,t){this._pairs=[],e&&J(e,this,t)}const K=V.prototype;function G(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function X(e,t,n){if(!t)return e;const r=n&&n.encode||G,o=n&&n.serialize;let s;if(s=o?o(t,n):k.isURLSearchParams(t)?t.toString():new V(t,n).toString(r),s){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}K.append=function(e,t){this._pairs.push([e,t])},K.toString=function(e){const t=e?function(t){return e.call(this,t,$)}:$;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var Q=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){k.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Z={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Y={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:V,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const ee="undefined"!=typeof window&&"undefined"!=typeof document,te=(ne="undefined"!=typeof navigator&&navigator.product,ee&&["ReactNative","NativeScript","NS"].indexOf(ne)<0);var ne;const re="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts;var oe={...Object.freeze({__proto__:null,hasBrowserEnv:ee,hasStandardBrowserWebWorkerEnv:re,hasStandardBrowserEnv:te}),...Y};function se(e){function t(e,n,r,o){let s=e[o++];if("__proto__"===s)return!0;const i=Number.isFinite(+s),a=o>=e.length;return s=!s&&k.isArray(r)?r.length:s,a?(k.hasOwnProp(r,s)?r[s]=[r[s],n]:r[s]=n,!i):(r[s]&&k.isObject(r[s])||(r[s]=[]),t(e,n,r[s],o)&&k.isArray(r[s])&&(r[s]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let s;for(r=0;r<o;r++)s=n[r],t[s]=e[s];return t}(r[s])),!i)}if(k.isFormData(e)&&k.isFunction(e.entries)){const n={};return k.forEachEntry(e,((e,r)=>{t(function(e){return k.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null}const ie={transitional:Z,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=k.isObject(e);if(o&&k.isHTMLForm(e)&&(e=new FormData(e)),k.isFormData(e))return r?JSON.stringify(se(e)):e;if(k.isArrayBuffer(e)||k.isBuffer(e)||k.isStream(e)||k.isFile(e)||k.isBlob(e))return e;if(k.isArrayBufferView(e))return e.buffer;if(k.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let s;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return J(e,new oe.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return oe.isNode&&k.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((s=k.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return J(s?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(k.isString(e))try{return(0,JSON.parse)(e),k.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ie.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&k.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw L.from(e,L.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:oe.classes.FormData,Blob:oe.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};k.forEach(["delete","get","head","post","put","patch"],(e=>{ie.headers[e]={}}));var ae=ie;const ce=k.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ue=Symbol("internals");function le(e){return e&&String(e).trim().toLowerCase()}function fe(e){return!1===e||null==e?e:k.isArray(e)?e.map(fe):String(e)}function de(e,t,n,r,o){return k.isFunction(r)?r.call(this,t,n):(o&&(t=n),k.isString(t)?k.isString(r)?-1!==t.indexOf(r):k.isRegExp(r)?r.test(t):void 0:void 0)}class pe{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=le(t);if(!o)throw new Error("header name must be a non-empty string");const s=k.findKey(r,o);(!s||void 0===r[s]||!0===n||void 0===n&&!1!==r[s])&&(r[s||t]=fe(e))}const s=(e,t)=>k.forEach(e,((e,n)=>o(e,n,t)));return k.isPlainObject(e)||e instanceof this.constructor?s(e,t):k.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?s((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&ce[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=le(e)){const n=k.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(k.isFunction(t))return t.call(this,e,n);if(k.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=le(e)){const n=k.findKey(this,e);return!(!n||void 0===this[n]||t&&!de(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=le(e)){const o=k.findKey(n,e);!o||t&&!de(0,n[o],o,t)||(delete n[o],r=!0)}}return k.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!de(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return k.forEach(this,((r,o)=>{const s=k.findKey(n,o);if(s)return t[s]=fe(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=fe(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return k.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&k.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[ue]=this[ue]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=le(e);t[r]||(function(e,t){const n=k.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return k.isArray(e)?e.forEach(r):r(e),this}}pe.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),k.reduceDescriptors(pe.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),k.freezeMethods(pe);var he=pe;function me(e,t){const n=this||ae,r=t||n,o=he.from(r.headers);let s=r.data;return k.forEach(e,(function(e){s=e.call(n,s,o.normalize(),t?t.status:void 0)})),o.normalize(),s}function ye(e){return!(!e||!e.__CANCEL__)}function ge(e,t,n){L.call(this,null==e?"canceled":e,L.ERR_CANCELED,t,n),this.name="CanceledError"}k.inherits(ge,L,{__CANCEL__:!0});var we=oe.hasStandardBrowserEnv?{write(e,t,n,r,o,s){const i=[e+"="+encodeURIComponent(t)];k.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),k.isString(r)&&i.push("path="+r),k.isString(o)&&i.push("domain="+o),!0===s&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function be(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var Ee=oe.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=k.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Oe(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,s=0,i=0;return t=void 0!==t?t:1e3,function(a){const c=Date.now(),u=r[i];o||(o=c),n[s]=a,r[s]=c;let l=i,f=0;for(;l!==s;)f+=n[l++],l%=e;if(s=(s+1)%e,s===i&&(i=(i+1)%e),c-o<t)return;const d=u&&c-u;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const s=o.loaded,i=o.lengthComputable?o.total:void 0,a=s-n,c=r(a);n=s;const u={loaded:s,total:i,progress:i?s/i:void 0,bytes:a,rate:c||void 0,estimated:c&&i&&s<=i?(i-s)/c:void 0,event:o};u[t?"download":"upload"]=!0,e(u)}}const ve={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=he.from(e.headers).normalize();let s,i,{responseType:a,withXSRFToken:c}=e;function u(){e.cancelToken&&e.cancelToken.unsubscribe(s),e.signal&&e.signal.removeEventListener("abort",s)}if(k.isFormData(r))if(oe.hasStandardBrowserEnv||oe.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let l=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const f=be(e.baseURL,e.url);function d(){if(!l)return;const r=he.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new L("Request failed with status code "+n.status,[L.ERR_BAD_REQUEST,L.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),u()}),(function(e){n(e),u()}),{data:a&&"text"!==a&&"json"!==a?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:r,config:e,request:l}),l=null}if(l.open(e.method.toUpperCase(),X(f,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,"onloadend"in l?l.onloadend=d:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(d)},l.onabort=function(){l&&(n(new L("Request aborted",L.ECONNABORTED,e,l)),l=null)},l.onerror=function(){n(new L("Network Error",L.ERR_NETWORK,e,l)),l=null},l.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Z;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new L(t,r.clarifyTimeoutError?L.ETIMEDOUT:L.ECONNABORTED,e,l)),l=null},oe.hasStandardBrowserEnv&&(c&&k.isFunction(c)&&(c=c(e)),c||!1!==c&&Ee(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&we.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in l&&k.forEach(o.toJSON(),(function(e,t){l.setRequestHeader(t,e)})),k.isUndefined(e.withCredentials)||(l.withCredentials=!!e.withCredentials),a&&"json"!==a&&(l.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",Oe(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",Oe(e.onUploadProgress)),(e.cancelToken||e.signal)&&(s=t=>{l&&(n(!t||t.type?new ge(null,e,l):t),l.abort(),l=null)},e.cancelToken&&e.cancelToken.subscribe(s),e.signal&&(e.signal.aborted?s():e.signal.addEventListener("abort",s)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);p&&-1===oe.protocols.indexOf(p)?n(new L("Unsupported protocol "+p+":",L.ERR_BAD_REQUEST,e)):l.send(r||null)}))}};k.forEach(ve,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Ae=e=>`- ${e}`,Se=e=>k.isFunction(e)||null===e||!1===e;var Re=e=>{e=k.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let s=0;s<t;s++){let t;if(n=e[s],r=n,!Se(n)&&(r=ve[(t=String(n)).toLowerCase()],void 0===r))throw new L(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+s]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));throw new L("There is no suitable adapter to dispatch the request "+(t?e.length>1?"since :\n"+e.map(Ae).join("\n"):" "+Ae(e[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return r};function Te(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new ge(null,e)}function je(e){return Te(e),e.headers=he.from(e.headers),e.data=me.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Re(e.adapter||ae.adapter)(e).then((function(t){return Te(e),t.data=me.call(e,e.transformResponse,t),t.headers=he.from(t.headers),t}),(function(t){return ye(t)||(Te(e),t&&t.response&&(t.response.data=me.call(e,e.transformResponse,t.response),t.response.headers=he.from(t.response.headers))),Promise.reject(t)}))}const xe=e=>e instanceof he?{...e}:e;function Ce(e,t){t=t||{};const n={};function r(e,t,n){return k.isPlainObject(e)&&k.isPlainObject(t)?k.merge.call({caseless:n},e,t):k.isPlainObject(t)?k.merge({},t):k.isArray(t)?t.slice():t}function o(e,t,n){return k.isUndefined(t)?k.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function s(e,t){if(!k.isUndefined(t))return r(void 0,t)}function i(e,t){return k.isUndefined(t)?k.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function a(n,o,s){return s in t?r(n,o):s in e?r(void 0,n):void 0}const c={url:s,method:s,data:s,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:a,headers:(e,t)=>o(xe(e),xe(t),!0)};return k.forEach(Object.keys(Object.assign({},e,t)),(function(r){const s=c[r]||o,i=s(e[r],t[r],r);k.isUndefined(i)&&s!==a||(n[r]=i)})),n}const Pe={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Pe[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Ne={};Pe.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.8] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,s)=>{if(!1===e)throw new L(r(o," has been removed"+(t?" in "+t:"")),L.ERR_DEPRECATED);return t&&!Ne[o]&&(Ne[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,s)}};var _e={assertOptions:function(e,t,n){if("object"!=typeof e)throw new L("options must be an object",L.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const s=r[o],i=t[s];if(i){const t=e[s],n=void 0===t||i(t,s,e);if(!0!==n)throw new L("option "+s+" must be "+n,L.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new L("Unknown option "+s,L.ERR_BAD_OPTION)}},validators:Pe};const Ue=_e.validators;class Be{constructor(e){this.defaults=e,this.interceptors={request:new Q,response:new Q}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Ce(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&_e.assertOptions(n,{silentJSONParsing:Ue.transitional(Ue.boolean),forcedJSONParsing:Ue.transitional(Ue.boolean),clarifyTimeoutError:Ue.transitional(Ue.boolean)},!1),null!=r&&(k.isFunction(r)?t.paramsSerializer={serialize:r}:_e.assertOptions(r,{encode:Ue.function,serialize:Ue.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let s=o&&k.merge(o.common,o[t.method]);o&&k.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=he.concat(s,o);const i=[];let a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const c=[];let u;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let l,f=0;if(!a){const e=[je.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,c),l=e.length,u=Promise.resolve(t);f<l;)u=u.then(e[f++],e[f++]);return u}l=i.length;let d=t;for(f=0;f<l;){const e=i[f++],t=i[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{u=je.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,l=c.length;f<l;)u=u.then(c[f++],c[f++]);return u}getUri(e){return X(be((e=Ce(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}k.forEach(["delete","get","head","options"],(function(e){Be.prototype[e]=function(t,n){return this.request(Ce(n||{},{method:e,url:t,data:(n||{}).data}))}})),k.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Ce(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Be.prototype[e]=t(),Be.prototype[e+"Form"]=t(!0)}));var Fe=Be;class Ie{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new ge(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Ie((function(t){e=t})),cancel:e}}}var ke=Ie;const Le={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Le).forEach((([e,t])=>{Le[t]=e}));var De=Le;const ze=function e(t){const n=new Fe(t),o=r(Fe.prototype.request,n);return k.extend(o,Fe.prototype,n,{allOwnKeys:!0}),k.extend(o,n,null,{allOwnKeys:!0}),o.create=function(n){return e(Ce(t,n))},o}(ae);ze.Axios=Fe,ze.CanceledError=ge,ze.CancelToken=ke,ze.isCancel=ye,ze.VERSION="1.6.8",ze.toFormData=J,ze.AxiosError=L,ze.Cancel=ze.CanceledError,ze.all=function(e){return Promise.all(e)},ze.spread=function(e){return function(t){return e.apply(null,t)}},ze.isAxiosError=function(e){return k.isObject(e)&&!0===e.isAxiosError},ze.mergeConfig=Ce,ze.AxiosHeaders=he,ze.formToJSON=e=>se(k.isHTMLForm(e)?new FormData(e):e),ze.getAdapter=Re,ze.HttpStatusCode=De,ze.default=ze,e.exports=ze}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r](s,s.exports,n),s.loaded=!0,s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n(512)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Iiwid2VicGFjazovL2NkcC1zZGsvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2RwLXNkay8uL25vZGVfbW9kdWxlcy9heGlvcy9kaXN0L2Jyb3dzZXIvYXhpb3MuY2pzIiwid2VicGFjazovL2NkcC1zZGsvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2RwLXNkay93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jZHAtc2RrL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jZHAtc2RrL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY2RwLXNkay93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2NkcC1zZGsvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jZHAtc2RrL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0Q29va2llVmFsdWUoa2V5KSB7XHJcbiAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY29va2llID0gY29va2llc1tpXS50cmltKCk7XHJcbiAgICBpZiAoY29va2llLnN0YXJ0c1dpdGgoa2V5ICsgJz0nKSkge1xyXG4gICAgICByZXR1cm4gY29va2llLnN1YnN0cmluZyhrZXkubGVuZ3RoICsgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBjb25zdCBsb2NhbFRlc3QgPSB0cnVlO1xyXG5hcGlDbGllbnQgPSBheGlvcy5jcmVhdGUoe1xyXG4gIC8vYmFzZVVSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGknLCAvLyBZb3VyIEFQSSBiYXNlIFVSTCAgIFxyXG4gIGJhc2VVUkw6ICdodHRwczovL2NkcC5ub3Zpbi5tYXJrZXRpbmcvYXBpJyxcclxuICB0aW1lb3V0OiA1MDAwLCAvLyBSZXF1ZXN0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIChvcHRpb25hbClcclxufSk7XHJcblxyXG5sZXQgcHJvamVjdElkO1xyXG5sZXQgYm9keTtcclxubGV0IG5vdmluQUI7XHJcbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9qZWN0SWQobm92aW5Qcm9qZWN0SWQpe1xyXG4gIG5vdmluQUIgPSAgZ2V0Q29va2llVmFsdWUoXCJub3Zpbi1BQlwiKTtcclxuICAvLyBpZihsb2NhbFRlc3QpXHJcbiAgLy8gICBub3ZpbkFCPVwiQVwiO1xyXG4gIHByb2plY3RJZCA9IG5vdmluUHJvamVjdElkO1xyXG4gIGJvZHkgPSB7XHJcbiAgICBcInByb2plY3RJZFwiOiBwcm9qZWN0SWQsXHJcbiAgICBcIm5vdmluQUJcIjoge1xyXG4gICAgICBcInZhbHVlXCI6IG5vdmluQUJcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcG9zdEFub255bW91c1VzZXIoKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vY29uc29sZS5sb2coXCJib2R5OiBcIiwgYm9keSk7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5wb3N0KCcvdXNlcnMvYW5vbnltb3VzVXNlcicsIGJvZHkpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0VXNlcigpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYW5vbnltb3VzX2lkX2Nvb2tpZSA9IFwibm92aW5Bbm9ueW1vdXNJZFwiO1xyXG4gICAgLy9jb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5wb3N0KCcvdXNlcnMvZ2V0VXNlci82NjM4ZTI0M2U4YTY3YmYxOWE2MjM5ZTEnLCBib2R5KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEudXNlcklkKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnBvc3QoJy91c2Vycy9nZXRVc2VyLycgKyBnZXRDb29raWVWYWx1ZShhbm9ueW1vdXNfaWRfY29va2llKSwgYm9keSk7XHJcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRVc2VySWQoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0VXNlcigpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLnVzZXJJZCAhPT0gdW5kZWZpbmVkPyByZXNwb25zZS51c2VySWQ6IG51bGw7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpc0lkZW50aWZpZWQoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID1hd2FpdCBnZXRVc2VyKCk7XHJcbiAgICByZXR1cm4gcmVzcG9uc2UudXNlcklkID09IG51bGw/IGZhbHNlOiB0cnVlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QW5vbnltb3VzSWQoKSB7XHJcbiAgY29uc3QgYW5vbnltb3VzX2lkX2Nvb2tpZSA9IFwibm92aW5Bbm9ueW1vdXNJZFwiOyBcclxuICByZXR1cm4gZ2V0Q29va2llVmFsdWUoYW5vbnltb3VzX2lkX2Nvb2tpZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFCVHlwZSgpIHtcclxuICBjb25zdCBub3ZpbkFCID0gXCJub3Zpbi1BQlwiOyBcclxuICByZXR1cm4gZ2V0Q29va2llVmFsdWUobm92aW5BQik7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGlzYUFjY2Vzc2liZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID1hd2FpdCBnZXRVc2VyKCk7XHJcbiAgICAgIGlmKHJlc3BvbnNlLmVtYWlsIHx8IHJlc3BvbnNlLm1vYmlsZSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKHVzZXJCb2R5KSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBhbm9ueW1vdXNfaWRfY29va2llID0gXCJub3ZpbkFub255bW91c0lkXCI7XHJcbiAgICAgIGlmKCF1c2VyQm9keS5hbm9ueW1vdXNJZClcclxuICAgICAgICB1c2VyQm9keS5hbm9ueW1vdXNJZCA9IGdldENvb2tpZVZhbHVlKGFub255bW91c19pZF9jb29raWUpO1xyXG4gICAgICBpZighdXNlckJvZHkucHJvamVjdElkKXtcclxuICAgICAgICB1c2VyQm9keS5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XHJcbiAgICAgIH1cclxuICAgICAgLy8gaWYoIXVzZXJCb2R5Lm9yaWdpbil7XHJcbiAgICAgIC8vICAgdXNlckJvZHkub3JpZ2luID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xyXG4gICAgICAvLyB9XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnBvc3QoJy91c2Vycy9hbm9ueW1vdXNVc2VyJywgdXNlckJvZHkpO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGFkZFdlYlB1c2hUb2tlbih1c2VyQm9keSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgYW5vbnltb3VzX2lkX2Nvb2tpZSA9IFwibm92aW5Bbm9ueW1vdXNJZFwiO1xyXG4gICAgICBpZighdXNlckJvZHkuX2lkKVxyXG4gICAgICAgIHVzZXJCb2R5Ll9pZCA9IGdldENvb2tpZVZhbHVlKGFub255bW91c19pZF9jb29raWUpO1xyXG4gICAgICBpZighdXNlckJvZHkucHJvamVjdElkKXtcclxuICAgICAgICB1c2VyQm9keS5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XHJcbiAgICAgIH1cclxuICAgICAgY29uc29sZS5sb2codXNlckJvZHkpO1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5wb3N0KCcvdXNlcnMvYWRkV2ViUHVzaFRva2VuJywgdXNlckJvZHkpO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIHNlbmRFdmVudChzZW5kQm9keSkge1xyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgIGNvbnN0IGFub255bW91c19pZF9jb29raWUgPSBcIm5vdmluQW5vbnltb3VzSWRcIjtcclxuICAgICAgaWYoIXNlbmRCb2R5LnVzZXJJZCl7XHJcbiAgICAgICAgc2VuZEJvZHkuYW5vbnltb3VzSWQgPSBnZXRDb29raWVWYWx1ZShhbm9ueW1vdXNfaWRfY29va2llKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoIXNlbmRCb2R5LnByb2plY3RJZCl7XHJcbiAgICAgICAgc2VuZEJvZHkucHJvamVjdElkID0gcHJvamVjdElkO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUubG9nKFwic2VuZEJvZHk6IFwiLCBzZW5kQm9keSk7XHJcbiAgICAgIC8vIGlmKCFzZW5kQm9keS5vcmlnaW4pe1xyXG4gICAgICAvLyAgIHNlbmRCb2R5Lm9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZTtcclxuICAgICAgLy8gfVxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5wb3N0KCcvZXZlbnRzL3NlbmQnLCBzZW5kQm9keSk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG5cclxuICBhc3luYyBmdW5jdGlvbiBnZXRGaXJzdEV2ZW50KHNlbmRCb2R5KSB7XHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgY29uc3QgYW5vbnltb3VzX2lkX2Nvb2tpZSA9IFwibm92aW5Bbm9ueW1vdXNJZFwiO1xyXG4gICAgICBpZighc2VuZEJvZHkudXNlcklkKXtcclxuICAgICAgICBzZW5kQm9keS51c2VySWQgPSBnZXRDb29raWVWYWx1ZShhbm9ueW1vdXNfaWRfY29va2llKTtcclxuICAgICAgfVxyXG4gICAgICBpZighc2VuZEJvZHkucHJvamVjdElkKXtcclxuICAgICAgICBzZW5kQm9keS5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQucG9zdCgnL2V2ZW50cy9nZXRGaXJzdEV2ZW50Jywgc2VuZEJvZHkpO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGdldExhc3RFdmVudChzZW5kQm9keSkge1xyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgIGNvbnN0IGFub255bW91c19pZF9jb29raWUgPSBcIm5vdmluQW5vbnltb3VzSWRcIjtcclxuICAgICAgaWYoIXNlbmRCb2R5LnVzZXJJZCl7XHJcbiAgICAgICAgc2VuZEJvZHkudXNlcklkID0gZ2V0Q29va2llVmFsdWUoYW5vbnltb3VzX2lkX2Nvb2tpZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYoIXNlbmRCb2R5LnByb2plY3RJZCl7XHJcbiAgICAgICAgc2VuZEJvZHkucHJvamVjdElkID0gcHJvamVjdElkO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnBvc3QoJy9ldmVudHMvZ2V0TGFzdEV2ZW50Jywgc2VuZEJvZHkpO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGZpbmRCeU1vYmlsZShtb2JpbGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vY29uc29sZS5sb2coYm9keSk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnBvc3QoJy91c2Vycy9maW5kVXNlckJ5TW9iaWxlLycrbW9iaWxlLCBib2R5KTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBmdW5jdGlvbiBmaW5kQnlFbWFpbChlbWFpbCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQucG9zdCgnL3VzZXJzL2ZpbmRVc2VyQnlFbWFpbC8nK2VtYWlsLCBib2R5KTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBwb3N0QW5vbnltb3VzVXNlcixcclxuICBzZW5kRXZlbnQsXHJcbiAgZ2V0QW5vbnltb3VzSWQsXHJcbiAgZ2V0VXNlcklkLFxyXG4gIGlzYUFjY2Vzc2liZSxcclxuICBzZXRBdHRyaWJ1dGVzLFxyXG4gIGdldFVzZXIsXHJcbiAgZmluZEJ5TW9iaWxlLFxyXG4gIGZpbmRCeUVtYWlsLFxyXG4gIGlzSWRlbnRpZmllZCxcclxuICBpbml0aWFsaXplUHJvamVjdElkLFxyXG4gIGdldEFCVHlwZSxcclxuICBnZXRGaXJzdEV2ZW50LFxyXG4gIGdldExhc3RFdmVudCxcclxuICBhZGRXZWJQdXNoVG9rZW5cclxufTtcclxuIiwiaW1wb3J0IHtcclxuICBwb3N0QW5vbnltb3VzVXNlcixcclxuICBzZW5kRXZlbnQsXHJcbiAgZ2V0QW5vbnltb3VzSWQsXHJcbiAgZ2V0VXNlcklkLFxyXG4gIGlzYUFjY2Vzc2liZSxcclxuICBzZXRBdHRyaWJ1dGVzLFxyXG4gIGdldFVzZXIsXHJcbiAgZmluZEJ5TW9iaWxlLFxyXG4gIGZpbmRCeUVtYWlsLFxyXG4gIGlzSWRlbnRpZmllZCxcclxuICBpbml0aWFsaXplUHJvamVjdElkLFxyXG4gIGdldEFCVHlwZSxcclxuICBnZXRGaXJzdEV2ZW50LFxyXG4gIGdldExhc3RFdmVudCxcclxuICBhZGRXZWJQdXNoVG9rZW5cclxufSBmcm9tIFwiLi9hcGlDbGllbnRcIjtcclxuXHJcbmZ1bmN0aW9uIGhhc0Nvb2tpZShrZXkpIHtcclxuICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldLnRyaW0oKTtcclxuICAgIGlmIChjb29raWUuc3RhcnRzV2l0aChrZXkgKyAnPScpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRDb29raWVWYWx1ZShrZXkpIHtcclxuICBjb25zdCBjb29raWVzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldLnRyaW0oKTtcclxuICAgIGlmIChjb29raWUuc3RhcnRzV2l0aChrZXkgKyAnPScpKSB7XHJcbiAgICAgIHJldHVybiBjb29raWUuc3Vic3RyaW5nKGtleS5sZW5ndGggKyAxKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQW5vbnltb3VzQ29va2llKCkge1xyXG4gIGNvbnN0IGFub255bW91c19pZF9jb29raWUgPSBcIm5vdmluQW5vbnltb3VzSWRcIjtcclxuICBpZiAoIWhhc0Nvb2tpZShhbm9ueW1vdXNfaWRfY29va2llKSB8fCAhZ2V0Q29va2llVmFsdWUoYW5vbnltb3VzX2lkX2Nvb2tpZSkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGFub255bW91c1VzZXIgPSBhd2FpdCBwb3N0QW5vbnltb3VzVXNlcigpO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IGFub255bW91c1VzZXIuX2lkO1xyXG4gICAgICAvL2NvbnNvbGUubG9nKFwiYW5vbnltb3VzSWQ6IFwiLCB2YWx1ZSk7XHJcbiAgICAgIGNvbnN0IG9uZVllYXJJbk1pbGxpc2Vjb25kcyA9IDMxNTM2MDAwMDAwOyAvLyBPbmUgeWVhciBpbiBtaWxsaXNlY29uZHNcclxuICAgICAgY29uc3QgbmV4dFllYXIgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgb25lWWVhckluTWlsbGlzZWNvbmRzKTtcclxuICAgICAgLy9jb25zb2xlLmxvZyhgJHthbm9ueW1vdXNfaWRfY29va2llfT0ke3ZhbHVlfTsgZXhwaXJlcz0ke25leHRZZWFyLnRvVVRDU3RyaW5nKCl9OyBwYXRoPS9gKTtcclxuICAgICAgZG9jdW1lbnQuY29va2llID0gYCR7YW5vbnltb3VzX2lkX2Nvb2tpZX09JHt2YWx1ZX07IGV4cGlyZXM9JHtuZXh0WWVhci50b1VUQ1N0cmluZygpfTsgcGF0aD0vYDtcclxuICAgICAgLy9jb25zb2xlLmxvZyhcIkNvb2tpZSBub3ZpbkFub255bW91c0lkOiBcIiArIGdldENvb2tpZVZhbHVlKGFub255bW91c19pZF9jb29raWUpICsgXCIgYWRkZWQuXCIpO1xyXG5cclxuICAgICAgLy8vLy8gdHJpZ2dlciB0cmFja19wYWdlX3ZpZXdfZXZlbnQgb24gc2VydmVyIHNpZGUgXHJcbiAgICAgIGNvbnN0IGJhc2VVUkwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luOyAgLy8gR2V0IHRoZSBiYXNlIFVSTCBvZiB0aGUgY3VycmVudCBwYWdlXHJcbiAgICAgIGNvbnN0IGFqYXhVUkwgPSBgJHtiYXNlVVJMfS93cC1hZG1pbi9hZG1pbi1hamF4LnBocD9hY3Rpb249dHJhY2tfcGFnZV92aWV3X2V2ZW50YDsgXHJcbiAgICAgIGF4aW9zLnBvc3QoYWpheFVSTClcclxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdFdmVudCB0cmFja2VkOicsIHJlc3BvbnNlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRyYWNraW5nIGV2ZW50OicsIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB3aGlsZSBnZXR0aW5nIGFub255bW91cyB1c2VyIGZyb20gc2VydmVyOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcImFub255bW91c19pZF9jb29raWUgQ29va2llIGFscmVhZHkgZXhpc3RzLlwiKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbSgpIHtcclxuICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXHJcbiAgY29uc3QgcmFuZG9tTnVtYmVyID0gTWF0aC5yYW5kb20oKTtcclxuXHJcbiAgLy8gRGVjaWRlIHdoZXRoZXIgdG8gb3V0cHV0IFwiQVwiIG9yIFwiQlwiIGJhc2VkIG9uIHRoZSByYW5kb20gbnVtYmVyXHJcbiAgaWYgKHJhbmRvbU51bWJlciA8IDAuNSkge1xyXG4gICAgcmV0dXJuIFwiQVwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gXCJCXCI7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhhc1dlYlB1c2goKSB7XHJcbiAgbGV0IHVzZXIgPSBhd2FpdCBub3Zpbi51c2VyLmdldFVzZXIoKTtcclxuICBpZiAodXNlci53ZWJQdXNoVG9rZW5zICYmIHVzZXIud2ViUHVzaFRva2Vucy5sZW5ndGggPiAwICYmIE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09IFwiZ3JhbnRlZFwiKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjaGVja0FCQ29va2llKCkge1xyXG4gIGNvbnN0IG5vdmluX0FCX2Nvb2tpZSA9IFwibm92aW4tQUJcIjtcclxuICBpZiAoIWhhc0Nvb2tpZShub3Zpbl9BQl9jb29raWUpIHx8ICFnZXRDb29raWVWYWx1ZShub3Zpbl9BQl9jb29raWUpKSB7XHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgY29uc3Qgb25lWWVhckluTWlsbGlzZWNvbmRzID0gMzE1MzYwMDAwMDA7IC8vIE9uZSB5ZWFyIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICBjb25zdCBuZXh0WWVhciA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBvbmVZZWFySW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBgJHtub3Zpbl9BQl9jb29raWV9PSR7Z2VuZXJhdGVSYW5kb20oKX07IGV4cGlyZXM9JHtuZXh0WWVhci50b1VUQ1N0cmluZygpfTsgcGF0aD0vYDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiAnLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vY29uc29sZS5sb2coXCJub3Zpbl9BQl9jb29raWUgYWxyZWFkeSBleGlzdHMuXCIpO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2VuZFBhZ2VWaWV3RXZlbnQoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGFub255bW91c19pZF9jb29raWUgPSBcIm5vdmluQW5vbnltb3VzSWRcIjtcclxuICAgIHZhciBwcm9wZXJ0aWVzID0ge1xyXG4gICAgICBcImZ1bGxVcmxcIjogd2luZG93LmxvY2F0aW9uLmhyZWYsXHJcbiAgICAgIFwicHJvdG9jb2xcIjogd2luZG93LmxvY2F0aW9uLnByb3RvY29sLFxyXG4gICAgICBcImhvc3ROYW1lXCI6IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSxcclxuICAgICAgXCJwYXRoTmFtZVwiOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXHJcbiAgICAgIFwic2VhcmNoXCI6IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gsXHJcbiAgICAgIFwiaGFzaFwiOiB3aW5kb3cubG9jYXRpb24uaGFzaFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgIFwiYW5vbnltb3VzSWRcIjogZ2V0Q29va2llVmFsdWUoYW5vbnltb3VzX2lkX2Nvb2tpZSksXHJcbiAgICAgIFwibmFtZVwiOiBcInBhZ2VWaWV3XCIsXHJcbiAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgc2VuZEV2ZW50KGJvZHkpO1xyXG4gICAgLy9jb25zb2xlLmxvZyhcInJlcyBzdGF0dXM6IFwiLCByZXMpO1xyXG4gICAgaWYgKHJlcyA9PSBcIm5vIHVzZXIgd2l0aCB0aGlzIHVzZXJJZFwiKSB7ICAvLyDYrdin2YTYqtuMINqp2Ycg2KfYsiDYr9uM2KrYp9io24zYs9iMINqp2KfYsdio2LEg2b7Yp9qpINi02K/ZhyDZiCDZhtuM2LPYqlxyXG4gICAgICAvL2NvbnN0IHByZXZBbm9ueW1vdXNJZCA9IGJvZHkudXNlcklkO1xyXG4gICAgICBjb25zdCBhbm9ueW1vdXNVc2VyID0gYXdhaXQgcG9zdEFub255bW91c1VzZXIoKTtcclxuICAgICAgLy9jb25zb2xlLmxvZyhcImFub255bW91c1VzZXI6IFwiLCBhbm9ueW1vdXNVc2VyLl9pZCk7XHJcbiAgICAgIGJvZHkudXNlcklkID0gYW5vbnltb3VzVXNlci5faWQ7XHJcbiAgICAgIC8vYm9keS5hbm9ueW1vdXNJZCA9IHByZXZBbm9ueW1vdXNJZDtcclxuICAgICAgY29uc3QgdmFsdWUgPSBhbm9ueW1vdXNVc2VyLl9pZDtcclxuICAgICAgY29uc3Qgb25lWWVhckluTWlsbGlzZWNvbmRzID0gMzE1MzYwMDAwMDA7IC8vIE9uZSB5ZWFyIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICBjb25zdCBuZXh0WWVhciA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBvbmVZZWFySW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBgJHthbm9ueW1vdXNfaWRfY29va2llfT0ke3ZhbHVlfTsgZXhwaXJlcz0ke25leHRZZWFyLnRvVVRDU3RyaW5nKCl9OyBwYXRoPS9gO1xyXG4gICAgICBhd2FpdCBzZW5kRXZlbnQoYm9keSk7XHJcblxyXG4gICAgfVxyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3Igd2hpbGUgcG9zdGluZyBmaXJzdCB2aXNpdCBldmVudDonLCBlcnJvcik7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY2hlY2tGaXJzdFZpc2l0Y29va2llKCkge1xyXG4gIGNvbnN0IG5vdmluX2ZpcnN0X3Zpc2l0X2Nvb2tpZSA9IFwibm92aW5fZmlyc3RfdmlzaXRcIjtcclxuICBjb25zdCBhbm9ueW1vdXNfaWRfY29va2llID0gXCJub3ZpbkFub255bW91c0lkXCI7XHJcbiAgdmFyIHByb3BlcnRpZXMgPSB7XHJcbiAgICBcIk9wZXJhdGluZyBTeXN0ZW1cIjogbmF2aWdhdG9yLnBsYXRmb3JtLFxyXG4gICAgXCJEZXZpY2VcIjogbmF2aWdhdG9yLnVzZXJBZ2VudCxcclxuICAgIFwiQnJvd3NlclwiOiBgJHtuYXZpZ2F0b3IuYXBwTmFtZX0gKCR7bmF2aWdhdG9yLmFwcFZlcnNpb259KWAsXHJcbiAgfTtcclxuICAvLyBHZW9sb2NhdGlvbiBpbmZvcm1hdGlvblxyXG4gIGlmICgnZ2VvbG9jYXRpb24nIGluIG5hdmlnYXRvcikge1xyXG4gICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihcclxuICAgICAgcG9zaXRpb24gPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSB9ID0gcG9zaXRpb24uY29vcmRzO1xyXG4gICAgICAgIHByb3BlcnRpZXMuR2VvbG9jYXRpb24gPSBgTGF0aXR1ZGU6ICR7bGF0aXR1ZGV9LCBMb25naXR1ZGU6ICR7bG9uZ2l0dWRlfWA7XHJcbiAgICAgIH0sXHJcbiAgICAgIGVycm9yID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGdlb2xvY2F0aW9uOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy9jb25zb2xlLmxvZygnR2VvbG9jYXRpb24nLCAnR2VvbG9jYXRpb24gbm90IHN1cHBvcnRlZCcpO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFoYXNDb29raWUobm92aW5fZmlyc3RfdmlzaXRfY29va2llKSB8fCAhZ2V0Q29va2llVmFsdWUobm92aW5fZmlyc3RfdmlzaXRfY29va2llKSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgICBcInVzZXJJZFwiOiBnZXRDb29raWVWYWx1ZShhbm9ueW1vdXNfaWRfY29va2llKSxcclxuICAgICAgICBcIm5hbWVcIjogXCJmaXJzdF92aXNpdFwiLFxyXG4gICAgICAgIFwicHJvcGVydGllc1wiOiBwcm9wZXJ0aWVzXHJcbiAgICAgIH07XHJcbiAgICAgIGF3YWl0IHNlbmRFdmVudChib2R5KTtcclxuICAgICAgY29uc3QgdmFsdWUgPSBcInRydWVcIjtcclxuICAgICAgY29uc3Qgb25lWWVhckluTWlsbGlzZWNvbmRzID0gMzE1MzYwMDAwMDA7IC8vIE9uZSB5ZWFyIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICBjb25zdCBuZXh0WWVhciA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBvbmVZZWFySW5NaWxsaXNlY29uZHMpO1xyXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBgJHtub3Zpbl9maXJzdF92aXNpdF9jb29raWV9PSR7dmFsdWV9OyBleHBpcmVzPSR7bmV4dFllYXIudG9VVENTdHJpbmcoKX07IHBhdGg9L2A7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB3aGlsZSBwb3N0aW5nIGZpcnN0IHZpc2l0IGV2ZW50OicsIGVycm9yKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIm5vdmluX2ZpcnN0X3Zpc2l0X2Nvb2tpZSBDb29raWUgYWxyZWFkeSBleGlzdHMuXCIpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmdsb2JhbC5ub3ZpbiA9IHtcclxuICBpbml0OiBhc3luYyBmdW5jdGlvbiAocHJvamVjdCkgeyAgLy8gaW5pdCBmdW5jdGlvbiBpcyBjYWxsZWQgZnJvbSB0aGUgc2RrXHJcbiAgICBhd2FpdCBjaGVja0FCQ29va2llKCk7XHJcbiAgICBpbml0aWFsaXplUHJvamVjdElkKHByb2plY3Qubm92aW5Qcm9qZWN0SWQpO1xyXG4gICAgYXdhaXQgY2hlY2tBbm9ueW1vdXNDb29raWUoKTtcclxuICAgIC8vYXdhaXQgc2VuZFBhZ2VWaWV3RXZlbnQoKTtcclxuICAgIC8vYXdhaXQgY2hlY2tGaXJzdFZpc2l0Y29va2llKCk7XHJcblxyXG4gIH0sXHJcbiAgZ2V0VmVyc2lvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIFwiMS4yLjJcIjtcclxuICB9LFxyXG4gIHVzZXI6IHtcclxuICAgIGdldFVzZXI6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2V0VXNlcigpO1xyXG4gICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSxcclxuICAgIGdldFVzZXJJZDogYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgZ2V0VXNlcklkKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QW5vbnltb3VzSWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGdldEFub255bW91c0lkKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QUJUeXBlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBnZXRBQlR5cGUoKTtcclxuICAgIH0sXHJcbiAgICBpc2FBY2Nlc3NpYmU6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGlzYUFjY2Vzc2liZSgpO1xyXG4gICAgfSxcclxuICAgIHNldEF0dHJpYnV0ZXM6IGFzeW5jIGZ1bmN0aW9uIChib2R5KSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBzZXRBdHRyaWJ1dGVzKGJvZHkpO1xyXG4gICAgfSxcclxuICAgIGFkZFdlYlB1c2hUb2tlbjogYXN5bmMgZnVuY3Rpb24gKGJvZHkpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGFkZFdlYlB1c2hUb2tlbihib2R5KTtcclxuICAgIH0sXHJcbiAgICBmaW5kQnlNb2JpbGU6IGFzeW5jIGZ1bmN0aW9uIChtb2JpbGUpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGZpbmRCeU1vYmlsZShtb2JpbGUpO1xyXG4gICAgfSxcclxuICAgIGZpbmRCeUVtYWlsOiBhc3luYyBmdW5jdGlvbiAoZW1haWwpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGZpbmRCeUVtYWlsKGVtYWlsKTtcclxuICAgIH0sXHJcbiAgICBpc0lkZW50aWZpZWQ6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGlzSWRlbnRpZmllZCgpO1xyXG4gICAgfSxcclxuICAgIGhhc1dlYlB1c2g6IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGhhc1dlYlB1c2goKTtcclxuICAgIH1cclxuICB9LFxyXG4gIGV2ZW50OiB7XHJcbiAgICBzZW5kOiBhc3luYyBmdW5jdGlvbiAoYm9keSkge1xyXG4gICAgICByZXR1cm4gYXdhaXQgc2VuZEV2ZW50KGJvZHkpO1xyXG4gICAgfSxcclxuICAgIGdldEZpcnN0RXZlbnQ6IGFzeW5jIGZ1bmN0aW9uIChib2R5KSB7XHJcbiAgICAgIHJldHVybiBhd2FpdCBnZXRGaXJzdEV2ZW50KGJvZHkpO1xyXG4gICAgfSxcclxuICAgIGdldExhc3RFdmVudDogYXN5bmMgZnVuY3Rpb24gKGJvZHkpIHtcclxuICAgICAgcmV0dXJuIGF3YWl0IGdldExhc3RFdmVudChib2R5KTtcclxuICAgIH1cclxuICB9LFxyXG4gIGZ1bmNzOiB7XHJcbiAgICBwZXJzaWFuVG9FbmdsaXNoOiBmdW5jdGlvbiAobnVtYmVyKSB7XHJcbiAgICAgIHJldHVybiBudW1iZXIucmVwbGFjZSgvW1xcdTA2NjAtXFx1MDY2OV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICByZXR1cm4gYy5jaGFyQ29kZUF0KDApIC0gMHgwNjYwO1xyXG4gICAgICB9KS5yZXBsYWNlKC9bXFx1MDZmMC1cXHUwNmY5XS9nLCBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgIHJldHVybiBjLmNoYXJDb2RlQXQoMCkgLSAweDA2ZjA7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHZhbGlkYXRlRW1haWw6IGZ1bmN0aW9uIChlbWFpbCkge1xyXG4gICAgICAvLyBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIHZhbGlkYXRpbmcgZW1haWwgYWRkcmVzc2VzXHJcbiAgICAgIHZhciByZWdleCA9IC9eXFx3KyhbLi1dP1xcdyspKkBcXHcrKFsuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskLztcclxuICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoZW1haWwpO1xyXG4gICAgfSxcclxuICAgIHZhbGlkYXRlTW9iaWxlOiBmdW5jdGlvbiAobW9iaWxlTnVtYmVyKSB7XHJcbiAgICAgIC8vIERlZmluZSB0aGUgcmVnZXggcGF0dGVybiBmb3IgdGhlIHJlcXVpcmVkIGZvcm1hdFxyXG4gICAgICB2YXIgcGF0dGVybiA9IC9eMDlcXGR7OX0kLztcclxuXHJcbiAgICAgIC8vIFRlc3QgdGhlIG1vYmlsZSBudW1iZXIgYWdhaW5zdCB0aGUgcGF0dGVyblxyXG4gICAgICBpZiAocGF0dGVybi50ZXN0KG1vYmlsZU51bWJlcikpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICB2YWxpZFVSTDogZnVuY3Rpb24gKHN0cikge1xyXG4gICAgICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ14oaHR0cHM/OlxcXFwvXFxcXC8pPycgKyAvLyBwcm90b2NvbFxyXG4gICAgICAgICcoKChbYS16XFxcXGRdKFthLXpcXFxcZC1dKlthLXpcXFxcZF0pKilcXFxcLikrW2Etel17Mix9fCcgKyAvLyBkb21haW4gbmFtZVxyXG4gICAgICAgICcoKFxcXFxkezEsM31cXFxcLil7M31cXFxcZHsxLDN9KSknICsgLy8gT1IgaXAgKHY0KSBhZGRyZXNzXHJcbiAgICAgICAgJyhcXFxcOlxcXFxkKyk/KFxcXFwvWy1hLXpcXFxcZCVfLn4rXSopKicgKyAvLyBwb3J0IGFuZCBwYXRoXHJcbiAgICAgICAgJyhcXFxcP1s7JmEtelxcXFxkJV8ufis9LV0qKT8nICsgLy8gcXVlcnkgc3RyaW5nXHJcbiAgICAgICAgJyhcXFxcI1stYS16XFxcXGRfXSopPyQnLCAnaScpOyAvLyBmcmFnbWVudCBsb2NhdG9yXHJcbiAgICAgIHJldHVybiAhIXBhdHRlcm4udGVzdChzdHIpO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnZXRDb29raWVWYWx1ZTtcclxuXHJcblxyXG5cclxuXHJcbiIsIi8vIEF4aW9zIHYxLjYuOCBDb3B5cmlnaHQgKGMpIDIwMjQgTWF0dCBaYWJyaXNraWUgYW5kIGNvbnRyaWJ1dG9yc1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59O1xuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9O1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufTtcblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn07XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufTtcblxuLyogQ2hlY2tpbmcgaWYgdGhlIGtpbmRPZlRlc3QgZnVuY3Rpb24gcmV0dXJucyB0cnVlIHdoZW4gcGFzc2VkIGFuIEhUTUxGb3JtRWxlbWVudC4gKi9cbmNvbnN0IGlzSFRNTEZvcm0gPSBraW5kT2ZUZXN0KCdIVE1MRm9ybUVsZW1lbnQnKTtcblxuY29uc3QgdG9DYW1lbENhc2UgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXFxzXShbYS16XFxkXSkoXFx3KikvZyxcbiAgICBmdW5jdGlvbiByZXBsYWNlcihtLCBwMSwgcDIpIHtcbiAgICAgIHJldHVybiBwMS50b1VwcGVyQ2FzZSgpICsgcDI7XG4gICAgfVxuICApO1xufTtcblxuLyogQ3JlYXRpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY2hlY2sgaWYgYW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5LiAqL1xuY29uc3QgaGFzT3duUHJvcGVydHkgPSAoKHtoYXNPd25Qcm9wZXJ0eX0pID0+IChvYmosIHByb3ApID0+IGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkoT2JqZWN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1JlZ0V4cCA9IGtpbmRPZlRlc3QoJ1JlZ0V4cCcpO1xuXG5jb25zdCByZWR1Y2VEZXNjcmlwdG9ycyA9IChvYmosIHJlZHVjZXIpID0+IHtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICBjb25zdCByZWR1Y2VkRGVzY3JpcHRvcnMgPSB7fTtcblxuICBmb3JFYWNoKGRlc2NyaXB0b3JzLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIGxldCByZXQ7XG4gICAgaWYgKChyZXQgPSByZWR1Y2VyKGRlc2NyaXB0b3IsIG5hbWUsIG9iaikpICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gcmV0IHx8IGRlc2NyaXB0b3I7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHJlZHVjZWREZXNjcmlwdG9ycyk7XG59O1xuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH07XG5cbiAgaXNBcnJheShhcnJheU9yU3RyaW5nKSA/IGRlZmluZShhcnJheU9yU3RyaW5nKSA6IGRlZmluZShTdHJpbmcoYXJyYXlPclN0cmluZykuc3BsaXQoZGVsaW1pdGVyKSk7XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn07XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufTtcblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9O1xuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufTtcblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG52YXIgdXRpbHMkMSA9IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzJDEuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMkMS50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSQxID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSQxLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSQxKTtcblxuICB1dGlscyQxLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG52YXIgaHR0cEFkYXB0ZXIgPSBudWxsO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzJDEuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMkMS5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMkMS5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzJDEuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscyQxLnRvRmxhdE9iamVjdCh1dGlscyQxLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMkMS5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMkMS50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgIG1ldGFUb2tlbnM6IHRydWUsXG4gICAgZG90czogZmFsc2UsXG4gICAgaW5kZXhlczogZmFsc2VcbiAgfSwgZmFsc2UsIGZ1bmN0aW9uIGRlZmluZWQob3B0aW9uLCBzb3VyY2UpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgICByZXR1cm4gIXV0aWxzJDEuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscyQxLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMkMS5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzJDEuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzJDEuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzJDEuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMkMS5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMkMS5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzJDEuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAoKHV0aWxzJDEuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMkMS5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMkMS50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICEodXRpbHMkMS5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzJDEuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscyQxLmZvckVhY2godmFsdWUsIGZ1bmN0aW9uIGVhY2goZWwsIGtleSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gISh1dGlscyQxLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzJDEuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscyQxLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSQxKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlJDEpO1xuICB9IDogZW5jb2RlJDE7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzJDEuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzJDEuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyJDEgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG5cbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtcyQxID0gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcblxudmFyIEZvcm1EYXRhJDEgPSB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuXG52YXIgQmxvYiQxID0gdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGw7XG5cbnZhciBwbGF0Zm9ybSQxID0ge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcyQxLFxuICAgIEZvcm1EYXRhOiBGb3JtRGF0YSQxLFxuICAgIEJsb2I6IEJsb2IkMVxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcblxuY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoXG4gIChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIGhhc0Jyb3dzZXJFbnYgJiYgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKHByb2R1Y3QpIDwgMFxuICB9KSh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbnZhciB1dGlscyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBoYXNCcm93c2VyRW52OiBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnY6IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52OiBoYXNTdGFuZGFyZEJyb3dzZXJFbnZcbn0pO1xuXG52YXIgcGxhdGZvcm0gPSB7XG4gIC4uLnV0aWxzLFxuICAuLi5wbGF0Zm9ybSQxXG59O1xuXG5mdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMkMS5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzJDEubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscyQxLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzJDEuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMkMS5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscyQxLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzJDEuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMkMS5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscyQxLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscyQxLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscyQxLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzJDEuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzJDEuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMkMS5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscyQxLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscyQxLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscyQxLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscyQxLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscyQxLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChkYXRhICYmIHV0aWxzJDEuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMkMS5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudmFyIGRlZmF1bHRzJDEgPSBkZWZhdWx0cztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscyQxLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbnZhciBwYXJzZUhlYWRlcnMgPSByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMkMS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzJDEuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscyQxLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscyQxLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscyQxLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzJDEudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMkMS5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYodXRpbHMkMS5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzJDEuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMkMS5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMkMS5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscyQxLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscyQxLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzJDEuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscyQxLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscyQxLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscyQxLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMkMS5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzJDEuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG52YXIgQXhpb3NIZWFkZXJzJDEgPSBBeGlvc0hlYWRlcnM7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHMkMTtcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMkMS5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzJDEuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuXG52YXIgY29va2llcyA9IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzJDEuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscyQxLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMkMS5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5mdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cblxudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMkMS5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG5cbmZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9ncmVzc0V2ZW50UmVkdWNlcihsaXN0ZW5lciwgaXNEb3dubG9hZFN0cmVhbSkge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiBlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlXG4gICAgfTtcblxuICAgIGRhdGFbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ10gPSB0cnVlO1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH07XG59XG5cbmNvbnN0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB4aHJBZGFwdGVyID0gaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCB3aXRoWFNSRlRva2VufSA9IGNvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udGVudFR5cGU7XG5cbiAgICBpZiAodXRpbHMkMS5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUoZmFsc2UpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IHJlcXVlc3RIZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgICBjb25zdCBbdHlwZSwgLi4udG9rZW5zXSA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuc3BsaXQoJzsnKS5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUoW3R5cGUgfHwgJ211bHRpcGFydC9mb3JtLWRhdGEnLCAuLi50b2tlbnNdLmpvaW4oJzsgJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzJDEuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4oY29uZmlnKSk7XG5cbiAgICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSkge1xuICAgICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgICAgY29uc3QgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzJDEuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufTtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlclxufTtcblxudXRpbHMkMS5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMkMS5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbnZhciBhZGFwdGVycyA9IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscyQxLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59O1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzJDEuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMkMSA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMkMS5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscyQxLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscyQxLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMkMS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscyQxLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscyQxLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuXG5jb25zdCBWRVJTSU9OID0gXCIxLjYuOFwiO1xuXG5jb25zdCB2YWxpZGF0b3JzJDEgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnMkMVt0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzJDEudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdmFsaWRhdG9yID0ge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzJDFcbn07XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIkMSgpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIkMSgpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXk7XG5cbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShkdW1teSA9IHt9KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG5cbiAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICBlcnIuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICBlcnIuc3RhY2sgKz0gJ1xcbicgKyBzdGFjaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMkMS5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzJDEubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscyQxLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzJDEuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscyQxLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxudmFyIEF4aW9zJDEgPSBBeGlvcztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG52YXIgQ2FuY2VsVG9rZW4kMSA9IENhbmNlbFRva2VuO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzJDEuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cblxuY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbnZhciBIdHRwU3RhdHVzQ29kZSQxID0gSHR0cFN0YXR1c0NvZGU7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyQxKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MkMS5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMkMS5leHRlbmQoaW5zdGFuY2UsIEF4aW9zJDEucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscyQxLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzJDEpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3MkMTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW4kMTtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMTtcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzJDEuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZSQxO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1heGlvcy5janMubWFwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUxMik7XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJnZXRDb29raWVWYWx1ZSIsImtleSIsImNvb2tpZXMiLCJkb2N1bWVudCIsImNvb2tpZSIsInNwbGl0IiwiaSIsImxlbmd0aCIsInRyaW0iLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwicHJvamVjdElkIiwiYm9keSIsIm5vdmluQUIiLCJhc3luYyIsImdldFVzZXIiLCJhbm9ueW1vdXNfaWRfY29va2llIiwiYXBpQ2xpZW50IiwicG9zdCIsImRhdGEiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiY3JlYXRlIiwiYmFzZVVSTCIsInRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIiwicG9zdEFub255bW91c1VzZXIiLCJzZW5kRXZlbnQiLCJzZW5kQm9keSIsInVzZXJJZCIsImFub255bW91c0lkIiwibG9nIiwiZ2V0QW5vbnltb3VzSWQiLCJnZXRVc2VySWQiLCJyZXNwb25zZSIsInVuZGVmaW5lZCIsImlzYUFjY2Vzc2liZSIsImVtYWlsIiwibW9iaWxlIiwic2V0QXR0cmlidXRlcyIsInVzZXJCb2R5IiwiZmluZEJ5TW9iaWxlIiwiZmluZEJ5RW1haWwiLCJpc0lkZW50aWZpZWQiLCJpbml0aWFsaXplUHJvamVjdElkIiwibm92aW5Qcm9qZWN0SWQiLCJnZXRBQlR5cGUiLCJnZXRGaXJzdEV2ZW50IiwiZ2V0TGFzdEV2ZW50IiwiYWRkV2ViUHVzaFRva2VuIiwiX2lkIiwiaGFzQ29va2llIiwiZyIsIm5vdmluIiwiaW5pdCIsInByb2plY3QiLCJub3Zpbl9BQl9jb29raWUiLCJvbmVZZWFySW5NaWxsaXNlY29uZHMiLCJuZXh0WWVhciIsIkRhdGUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwidG9VVENTdHJpbmciLCJjaGVja0FCQ29va2llIiwidmFsdWUiLCJhamF4VVJMIiwid2luZG93IiwibG9jYXRpb24iLCJvcmlnaW4iLCJ0aGVuIiwiY2F0Y2giLCJjaGVja0Fub255bW91c0Nvb2tpZSIsImdldFZlcnNpb24iLCJ1c2VyIiwiaGFzV2ViUHVzaCIsIndlYlB1c2hUb2tlbnMiLCJOb3RpZmljYXRpb24iLCJwZXJtaXNzaW9uIiwiZXZlbnQiLCJzZW5kIiwiZnVuY3MiLCJwZXJzaWFuVG9FbmdsaXNoIiwibnVtYmVyIiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwidmFsaWRhdGVFbWFpbCIsInRlc3QiLCJ2YWxpZGF0ZU1vYmlsZSIsIm1vYmlsZU51bWJlciIsInZhbGlkVVJMIiwic3RyIiwiUmVnRXhwIiwiYmluZCIsImZuIiwidGhpc0FyZyIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsImtpbmRPZiIsImNhY2hlIiwidGhpbmciLCJjYWxsIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsImtpbmRPZlRlc3QiLCJ0eXBlIiwidHlwZU9mVGVzdCIsImlzQXJyYXkiLCJBcnJheSIsImlzVW5kZWZpbmVkIiwiaXNBcnJheUJ1ZmZlciIsImlzU3RyaW5nIiwiaXNGdW5jdGlvbiIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidmFsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpdGVyYXRvciIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRmlsZUxpc3QiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImZvckVhY2giLCJvYmoiLCJhbGxPd25LZXlzIiwibCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibGVuIiwiZmluZEtleSIsIl9rZXkiLCJfZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJpc0NvbnRleHREZWZpbmVkIiwiY29udGV4dCIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiaXNIVE1MRm9ybSIsImhhc093blByb3BlcnR5IiwicHJvcCIsImlzUmVnRXhwIiwicmVkdWNlRGVzY3JpcHRvcnMiLCJyZWR1Y2VyIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVkdWNlZERlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsIm5hbWUiLCJyZXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiQUxQSEEiLCJESUdJVCIsIkFMUEhBQkVUIiwiQUxQSEFfRElHSVQiLCJ0b1VwcGVyQ2FzZSIsImlzQXN5bmNGbiIsInV0aWxzJDEiLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsImtpbmQiLCJGb3JtRGF0YSIsImFwcGVuZCIsImlzQXJyYXlCdWZmZXJWaWV3IiwicmVzdWx0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc0Jvb2xlYW4iLCJpc1N0cmVhbSIsInBpcGUiLCJtZXJnZSIsImNhc2VsZXNzIiwidGhpcyIsImFzc2lnblZhbHVlIiwidGFyZ2V0S2V5IiwiZXh0ZW5kIiwiYSIsImIiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJwcm9wcyIsImRlZmluZVByb3BlcnR5IiwiYXNzaWduIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsImZpbHRlciIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJlbmRzV2l0aCIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwiU3RyaW5nIiwibGFzdEluZGV4IiwiaW5kZXhPZiIsInRvQXJyYXkiLCJhcnIiLCJmb3JFYWNoRW50cnkiLCJuZXh0IiwiZG9uZSIsInBhaXIiLCJtYXRjaEFsbCIsInJlZ0V4cCIsIm1hdGNoZXMiLCJleGVjIiwicHVzaCIsImhhc093blByb3AiLCJmcmVlemVNZXRob2RzIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwic2V0IiwiRXJyb3IiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJ0b0NhbWVsQ2FzZSIsIm0iLCJwMSIsInAyIiwibm9vcCIsInRvRmluaXRlTnVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJnbG9iYWwiLCJnZW5lcmF0ZVN0cmluZyIsInNpemUiLCJhbHBoYWJldCIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJ0b0pTT05PYmplY3QiLCJzdGFjayIsInZpc2l0Iiwic291cmNlIiwidGFyZ2V0IiwicmVkdWNlZFZhbHVlIiwiaXNUaGVuYWJsZSIsIkF4aW9zRXJyb3IiLCJjb2RlIiwiY29uZmlnIiwicmVxdWVzdCIsImNhcHR1cmVTdGFja1RyYWNlIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGF0dXMiLCJwcm90b3R5cGUkMSIsImlzVmlzaXRhYmxlIiwicmVtb3ZlQnJhY2tldHMiLCJyZW5kZXJLZXkiLCJwYXRoIiwiZG90cyIsImNvbmNhdCIsIm1hcCIsInRva2VuIiwiam9pbiIsImZyb20iLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJjYXVzZSIsInByZWRpY2F0ZXMiLCJ0b0Zvcm1EYXRhIiwiZm9ybURhdGEiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwibWV0YVRva2VucyIsImluZGV4ZXMiLCJvcHRpb24iLCJ2aXNpdG9yIiwiZGVmYXVsdFZpc2l0b3IiLCJ1c2VCbG9iIiwiQmxvYiIsImNvbnZlcnRWYWx1ZSIsInRvSVNPU3RyaW5nIiwiQnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInNvbWUiLCJpc0ZsYXRBcnJheSIsImVsIiwiaW5kZXgiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwicG9wIiwiZW5jb2RlJDEiLCJjaGFyTWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWF0Y2giLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsInBhcmFtcyIsIl9wYWlycyIsImVuY29kZSIsImJ1aWxkVVJMIiwidXJsIiwiX2VuY29kZSIsInNlcmlhbGl6ZUZuIiwic2VyaWFsaXplIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJlbmNvZGVyIiwiSW50ZXJjZXB0b3JNYW5hZ2VyJDEiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwiZWplY3QiLCJpZCIsImNsZWFyIiwiaCIsInRyYW5zaXRpb25hbERlZmF1bHRzIiwic2lsZW50SlNPTlBhcnNpbmciLCJmb3JjZWRKU09OUGFyc2luZyIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJwbGF0Zm9ybSQxIiwiaXNCcm93c2VyIiwiY2xhc3NlcyIsIlVSTFNlYXJjaFBhcmFtcyIsInByb3RvY29scyIsImhhc0Jyb3dzZXJFbnYiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwibmF2aWdhdG9yIiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwicGxhdGZvcm0iLCJmcmVlemUiLCJfX3Byb3RvX18iLCJmb3JtRGF0YVRvSlNPTiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsImFycmF5VG9PYmplY3QiLCJlbnRyaWVzIiwicGFyc2VQcm9wUGF0aCIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZSIsImhhc0pTT05Db250ZW50VHlwZSIsImlzT2JqZWN0UGF5bG9hZCIsInNldENvbnRlbnRUeXBlIiwiaGVscGVycyIsImlzTm9kZSIsInRvVVJMRW5jb2RlZEZvcm0iLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsImVudiIsInJhd1ZhbHVlIiwicGFyc2VyIiwicGFyc2UiLCJlIiwic3RyaW5naWZ5U2FmZWx5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJKU09OUmVxdWVzdGVkIiwicmVzcG9uc2VUeXBlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJFUlJfQkFEX1JFU1BPTlNFIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJkZWZhdWx0cyQxIiwiaWdub3JlRHVwbGljYXRlT2YiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwibGluZSIsInBhcnNlSGVhZGVycyIsImdldCIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJoYXMiLCJtYXRjaGVyIiwiZGVsZXRlZCIsImRlbGV0ZUhlYWRlciIsIm5vcm1hbGl6ZSIsImZvcm1hdCIsIm5vcm1hbGl6ZWQiLCJ3IiwiY2hhciIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJmaXJzdCIsImNvbXB1dGVkIiwiYWNjZXNzb3IiLCJhY2Nlc3NvcnMiLCJkZWZpbmVBY2Nlc3NvciIsImFjY2Vzc29yTmFtZSIsIm1ldGhvZE5hbWUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJjb25maWd1cmFibGUiLCJidWlsZEFjY2Vzc29ycyIsIm1hcHBlZCIsImhlYWRlclZhbHVlIiwiQXhpb3NIZWFkZXJzJDEiLCJ0cmFuc2Zvcm1EYXRhIiwiZm5zIiwiaXNDYW5jZWwiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsZWRFcnJvciIsIkVSUl9DQU5DRUxFRCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsInRvR01UU3RyaW5nIiwicmVhZCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImNvbWJpbmVVUkxzIiwiaXNVUkxTYW1lT3JpZ2luIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0IiwicmVxdWVzdFVSTCIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwibGlzdGVuZXIiLCJpc0Rvd25sb2FkU3RyZWFtIiwiYnl0ZXNOb3RpZmllZCIsIl9zcGVlZG9tZXRlciIsInNhbXBsZXNDb3VudCIsIm1pbiIsImJ5dGVzIiwidGltZXN0YW1wcyIsImZpcnN0U2FtcGxlVFMiLCJoZWFkIiwidGFpbCIsImNodW5rTGVuZ3RoIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsInJvdW5kIiwic3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwia25vd25BZGFwdGVycyIsImh0dHAiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsIm9uQ2FuY2VsZWQiLCJ3aXRoWFNSRlRva2VuIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJCb29sZWFuIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsIkVSUl9CQURfUkVRVUVTVCIsImZsb29yIiwic2V0dGxlIiwiZXJyIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9wZW4iLCJwYXJhbXNTZXJpYWxpemVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwic2V0VGltZW91dCIsIm9uYWJvcnQiLCJFQ09OTkFCT1JURUQiLCJvbmVycm9yIiwiRVJSX05FVFdPUksiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiRVRJTUVET1VUIiwieHNyZlZhbHVlIiwic2V0UmVxdWVzdEhlYWRlciIsIndpdGhDcmVkZW50aWFscyIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwiYWJvcnQiLCJzdWJzY3JpYmUiLCJhYm9ydGVkIiwicGFyc2VQcm90b2NvbCIsInJlbmRlclJlYXNvbiIsInJlYXNvbiIsImlzUmVzb2x2ZWRIYW5kbGUiLCJhZGFwdGVycyIsIm5hbWVPckFkYXB0ZXIiLCJyZWplY3RlZFJlYXNvbnMiLCJyZWFzb25zIiwic3RhdGUiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwidGltZW91dE1lc3NhZ2UiLCJkZWNvbXByZXNzIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50Iiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJjb25maWdWYWx1ZSIsInZhbGlkYXRvcnMkMSIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJFUlJfREVQUkVDQVRFRCIsIndhcm4iLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJFUlJfQkFEX09QVElPTiIsInZhbGlkYXRvcnMiLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJfcmVxdWVzdCIsImR1bW15IiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwiY29udGV4dEhlYWRlcnMiLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInByb21pc2UiLCJjaGFpbiIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsIkF4aW9zJDEiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInNwbGljZSIsIkNhbmNlbFRva2VuJDEiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiSHR0cFN0YXR1c0NvZGUkMSIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImluc3RhbmNlIiwiVkVSU0lPTiIsIkNhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiY2FsbGJhY2siLCJpc0F4aW9zRXJyb3IiLCJwYXlsb2FkIiwiZm9ybVRvSlNPTiIsImdldEFkYXB0ZXIiLCJkZWZhdWx0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImRlZmluaXRpb24iLCJvIiwiRnVuY3Rpb24iLCJobWQiLCJjaGlsZHJlbiJdLCJzb3VyY2VSb290IjoiIn0=